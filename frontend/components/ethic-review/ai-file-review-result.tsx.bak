"use client"

import { useState, useEffect, useRef } from "react"
import { FileReviewIssue, FileReviewResult, autoFixFileIssues } from "@/app/services/ai-file-review"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import { CheckCircle2, AlertCircle, AlertTriangle, Info, Loader2, Zap, RefreshCw, FileText, WandSparkles, ChevronDown, ChevronUp, Upload, Clock } from "lucide-react"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion"
import { toast } from "@/components/ui/use-toast"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Dialog, DialogContent } from "@/components/ui/dialog" 
import { FileDiffView } from "./file-diff-view"
import { Progress } from "@/components/ui/progress"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog"
import React from "react"

interface AIFileReviewResultProps {
  result: FileReviewResult
  isLoading?: boolean
  onFixIssues?: (fixedIssues: FileReviewIssue[], updatedFiles?: Map<number, File[]>) => void
  files?: Map<number, File[]> // 文件ID到文件列表的映射
}

export function AIFileReviewResult({ 
  result, 
  isLoading = false, 
  onFixIssues,
  files
}: AIFileReviewResultProps) {
  const [isFixing, setIsFixing] = useState(false)
  const [expandedItems, setExpandedItems] = useState<string[]>([])
  const [fixError, setFixError] = useState<string | null>(null)
  const [selectedIssue, setSelectedIssue] = useState<FileReviewIssue | null>(null)
  const [showDiffView, setShowDiffView] = useState(false)
  const [showBatchFixAlert, setShowBatchFixAlert] = useState(false)
  const [isExpanded, setIsExpanded] = useState(false)
  const [progressValue, setProgressValue] = useState(0)
  
  // 对问题列表进行排序：未修复的排在前面，已修复的排在后面
  const sortedIssues = React.useMemo(() => {
    if (!result?.issues) return [];
    
    // 复制一份问题列表，避免影响原数据
    return [...result.issues].sort((a, b) => {
      // 首先按照是否已修复排序（未修复的排在前面）
      if (a.fixed !== b.fixed) {
        return a.fixed ? 1 : -1;
      }
      
      // 其次按照严重程度排序（严重的排在前面）
      if (a.severity !== b.severity) {
        if (a.severity === 'error') return -1;
        if (b.severity === 'error') return 1;
        if (a.severity === 'warning') return -1;
        if (b.severity === 'warning') return 1;
      }
      
      // 最后按照问题类型排序
      return 0;
    });
  }, [result?.issues]);
  
  // 文件上传相关状态
  const [uploadingFiles, setUploadingFiles] = useState<{
    issueId: number;
    fileName: string;
    progress: number;
    status: 'uploading' | 'processing' | 'complete' | 'error';
  }[]>([])
  const [isFileAnalyzing, setIsFileAnalyzing] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // 存储更新后的文件
  const [updatedFiles, setUpdatedFiles] = useState<Map<number, File[]>>(new Map())

  // 存储可修复问题的实际数量（解决修复后数量不更新问题）
  const [fixableIssuesCount, setFixableIssuesCount] = useState(0)

  // 初始化时自动展开所有错误项
  useEffect(() => {
    if (result?.issues?.length > 0 && !isLoading) {
      // 找到所有错误级别的问题
      const errorIndices = sortedIssues
        .map((issue, index) => issue.severity === 'error' ? `item-${index}` : null)
        .filter(Boolean) as string[]
      
      if (errorIndices.length > 0) {
        setExpandedItems(errorIndices)
      }
      
      // 初始化可修复问题的数量
      const fixableCount = sortedIssues.filter(issue => issue.autoFixable && !issue.fixed).length
      setFixableIssuesCount(fixableCount)
    }
  }, [result, isLoading, sortedIssues])

  // 处理单个问题的修复
  const handleFixSingleIssue = (issue: FileReviewIssue) => {
    // 查找对应的文件
    const fileArray = files?.get(issue.fileId) || []
    if (fileArray.length > 0) {
      // 设置当前选中的问题并显示差异对比视图
      setSelectedIssue(issue)
      setShowDiffView(true)
    } else {
      toast({
        title: "无法修复",
        description: "未找到关联的文件",
        variant: "destructive"
      })
    }
  }

  // 处理应用修复后的回调
  const handleApplyFix = (fixedIssue: FileReviewIssue, newFile?: File) => {
    if (!result || !onFixIssues) return
    
    // 确保先关闭差异对比视图，再处理后续逻辑
    setShowDiffView(false)
    
    // 延迟一下处理逻辑，确保对话框关闭动画完成
    setTimeout(() => {
      // 创建修复后的问题列表
      const updatedIssues = result.issues.map(issue => {
        if (issue.fileId === fixedIssue.fileId && issue.issueType === fixedIssue.issueType) {
          return fixedIssue // 使用修复后的问题替换原问题
        }
        return issue
      })
      
      // 如果有新文件，更新文件列表
      if (newFile && fixedIssue.fileId) {
        const currentFiles = new Map(updatedFiles)
        const existingFiles = currentFiles.get(fixedIssue.fileId) || []
        // 找到并替换原始文件
        const updatedFileList = existingFiles.length > 0 
          ? existingFiles.map(f => f.name === newFile.name ? newFile : f)
          : [newFile]
        
        currentFiles.set(fixedIssue.fileId, updatedFileList)
        setUpdatedFiles(currentFiles)
        
        // 调用回调
        onFixIssues(updatedIssues, currentFiles)
      } else {
        // 没有新文件，只更新问题列表
        onFixIssues(updatedIssues)
      }
      
      // 更新可修复问题的数量
      const fixableCount = updatedIssues.filter(issue => issue.autoFixable && !issue.fixed).length
      setFixableIssuesCount(fixableCount)
    }, 100) // 短暂延迟确保UI更新
  }

  // 处理自动修复所有问题
  const handleAutoFixAll = async () => {
    // 先询问用户确认
    setShowBatchFixAlert(true)
  }

  // 用户确认批量修复后的处理
  const confirmBatchFix = async () => {
    if (!onFixIssues) return
    
    // 设置isFixing状态的逻辑已经移到调用此函数的地方
    setFixError(null)
    
    try {
      // 找出所有可自动修复的问题
      const fixableIssues = sortedIssues.filter(issue => issue.autoFixable && !issue.fixed)
      if (fixableIssues.length > 0) {
        console.log("开始批量自动修复问题:", fixableIssues.length)
        const fixedIssues = await autoFixFileIssues(result.issues)
        console.log("批量问题修复完成:", fixedIssues)
        
        // 创建一个新的文件映射
        const batchUpdatedFiles = new Map(updatedFiles)
        
        // TODO: 实际应用中，这里需要为每个被修复的问题生成新文件
        // 这里只做简单模拟
        
        onFixIssues(fixedIssues, batchUpdatedFiles)
        
        // 更新可修复问题数量
        setFixableIssuesCount(0)
        
        toast({
          title: "批量修复完成",
          description: `已成功修复 ${fixableIssues.length} 个问题`,
          variant: "default"
        })
      }
    } catch (error) {
      console.error("批量自动修复失败:", error)
      setFixError("自动修复过程发生错误")
      
      toast({
        title: "修复失败",
        description: "自动修复过程中发生错误，请重试",
        variant: "destructive"
      })
    }
    // finally块中的setIsFixing(false)移除，因为现在是通过setTimeout控制关闭弹窗和状态重置
  }

  // 获取实际的结果对象，确保它是有效的
  const safeResult = result || { hasIssues: false, issues: [], totalFiles: 0, validFiles: 0 }
  
  // 切换展开/收起状态
  const toggleExpanded = () => {
    if (isExpanded) {
      // 当前是展开状态，需要收起
      setExpandedItems([])
      setIsExpanded(false)
    } else {
      // 当前是收起状态，需要展开全部
      setExpandedItems(sortedIssues.map((_, index) => `item-${index}`))
      setIsExpanded(true)
    }
  }

  // 渲染问题严重性图标
  const renderSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'error':
        return <AlertCircle className="h-5 w-5 text-destructive" />
      case 'warning':
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />
      case 'info':
        return <Info className="h-5 w-5 text-blue-500" />
      default:
        return null
    }
  }

  // 获取问题类型中文名称
  const getIssueTypeName = (type: string) => {
    const typeMap: Record<string, string> = {
      'quantity': '数量校验',
      'fileType': '文件类型',
      'naming': '命名规范',
      'version': '版本号',
      'format': '格式规范'
    }
    return typeMap[type] || type
  }

  // 处理文件上传
  const handleFileUpload = (issueId: number, fileType: string) => {
    if (fileInputRef.current) {
      // 设置上传的文件关联到指定问题
      fileInputRef.current.setAttribute('data-issue-id', issueId.toString());
      fileInputRef.current.setAttribute('data-file-type', fileType);
      fileInputRef.current.click();
    }
  }

  // 处理文件选择后的上传逻辑
  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (!files || files.length === 0) return;

    const issueId = parseInt(e.target.getAttribute('data-issue-id') || '0');
    const fileType = e.target.getAttribute('data-file-type') || '';
    
    // 为每个选择的文件创建上传状态
    const newUploadingFiles = Array.from(files).map(file => ({
      issueId,
      fileName: file.name,
      progress: 0,
      status: 'uploading' as const
    }));
    
    setUploadingFiles(prev => [...prev, ...newUploadingFiles]);
    
    // 模拟文件上传过程
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const uploadIndex = newUploadingFiles.findIndex(f => f.fileName === file.name);
      
      // 模拟上传进度
      for (let progress = 0; progress <= 100; progress += 10) {
        await new Promise(resolve => setTimeout(resolve, 100));
        setUploadingFiles(prev => {
          const updated = [...prev];
          const index = prev.findIndex(f => f.fileName === file.name && f.issueId === issueId);
          if (index !== -1) {
            updated[index] = { ...updated[index], progress };
          }
          return updated;
        });
      }
      
      // 上传完成后设置为处理中
      setUploadingFiles(prev => {
        const updated = [...prev];
        const index = prev.findIndex(f => f.fileName === file.name && f.issueId === issueId);
        if (index !== -1) {
          updated[index] = { ...updated[index], status: 'processing' };
        }
        return updated;
      });
      
      // 模拟AI处理文件
      setIsFileAnalyzing(true);
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // 处理完成后，更新文件状态
      const success = Math.random() > 0.2; // 80%的成功率
      
      setUploadingFiles(prev => {
        const updated = [...prev];
        const index = prev.findIndex(f => f.fileName === file.name && f.issueId === issueId);
        if (index !== -1) {
          updated[index] = { 
            ...updated[index], 
            status: success ? 'complete' : 'error'
          };
        }
        return updated;
      });
      
      if (success) {
        // 如果成功，模拟更新文件列表和问题状态
        const newFile = file;
        const currentFiles = new Map(updatedFiles);
        const existingFiles = currentFiles.get(issueId) || [];
        
        // 添加新文件到文件列表
        currentFiles.set(issueId, [...existingFiles, newFile]);
        setUpdatedFiles(currentFiles);
        
        // 更新问题状态
        if (onFixIssues && result) {
          const updatedIssues = result.issues.map(issue => {
            if (issue.fileId === issueId && issue.issueType === 'quantity') {
              // 确保返回的对象符合FileReviewIssue类型
              return {
                ...issue,
                fixed: true,
                severity: 'info' as 'error' | 'warning' | 'info',
                message: `已上传: ${file.name}`
              };
            }
            return issue;
          });
          
          onFixIssues(updatedIssues, currentFiles);
          
          // 更新可修复问题数量
          const fixableCount = updatedIssues.filter(issue => issue.autoFixable && !issue.fixed).length;
          setFixableIssuesCount(fixableCount);
          
          // 显示成功提示
          toast({
            title: "文件上传成功",
            description: `${file.name} 已成功上传并通过审查`,
            variant: "default"
          });
        }
      } else {
        // 如果失败，显示错误提示
        toast({
          title: "文件处理失败",
          description: `${file.name} 处理过程中出现错误，请重试`,
          variant: "destructive"
        });
      }
    }
    
    // 所有文件处理完成后
    setIsFileAnalyzing(false);
    
    // 清除上传状态（延迟一段时间后）
    setTimeout(() => {
      setUploadingFiles(prev => prev.filter(f => f.status !== 'complete'));
    }, 5000);
    
    // 重置文件输入框，以便可以再次选择相同的文件
    e.target.value = '';
  }

  if (isLoading) {
    return (
      <Card className="w-full border border-gray-100 rounded-lg shadow-sm bg-white overflow-hidden">
        <CardContent className="flex items-center justify-center py-12">
          <div className="flex flex-col items-center gap-4">
            <div className="relative w-16 h-16 flex items-center justify-center">
              <div className="absolute inset-0 rounded-full bg-blue-50 animate-ping opacity-50"></div>
              <Loader2 className="h-10 w-10 animate-spin text-blue-600 relative z-10" />
            </div>
            <div className="text-center">
              <p className="text-lg font-medium text-gray-700">正在分析文件内容</p>
              <p className="text-sm text-gray-500 mt-1">
                这可能需要几秒钟...
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }

  // 如果没有问题
  if (!safeResult.hasIssues) {
    return (
      <Card className="w-full border border-gray-100 rounded-lg shadow-sm overflow-hidden bg-white">
        <CardContent className="pt-8 pb-10">
          <div className="flex items-center justify-center flex-col gap-4 text-center">
            <div className="w-16 h-16 rounded-full bg-green-50 flex items-center justify-center">
              <CheckCircle2 className="h-10 w-10 text-green-500" />
            </div>
            <div>
              <p className="text-xl font-medium text-green-700">文件审查通过</p>
              <p className="text-gray-500 mt-1">
                已成功验证 {safeResult.validFiles}/{safeResult.totalFiles} 个文件
              </p>
              <p className="text-sm text-gray-400 mt-4 max-w-md mx-auto">
                所有文件均符合伦理审查要求，您可以安全地提交审查申请
              </p>
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }

  // 渲染问题列表
  return (
    <>
      <div className={`w-full flex flex-col rounded-md bg-transparent`}>
        <div className={`${
        sortedIssues.some(i => i.severity === 'error') 
            ? 'text-red-600' 
            : 'text-amber-600'
        } flex items-center justify-between`}>
          <div className="flex items-center gap-2">
            {sortedIssues.some(i => i.severity === 'error') && (
              <div className="w-2 h-2 rounded-full bg-red-500 animate-pulse"></div>
            )}
            <Badge variant="outline" className={`
              ${sortedIssues.some(i => i.severity === 'error') 
                ? 'bg-white text-red-600 border-red-200' 
                : 'bg-white text-amber-600 border-amber-200'
              } rounded-full px-3 shadow-sm
            `}>
              发现 {sortedIssues.length} 个问题
            </Badge>
          </div>
          <div className="text-gray-500 text-sm">
            智能审查发现了以下需要注意的问题
          </div>
        </div>

        <div className="mt-4 flex-1 flex flex-col">
          <div className="flex justify-between items-center mb-4">
            <div className="text-sm text-gray-500 flex items-center gap-2">
              <div className="flex items-center gap-1.5">
                <div className="w-1.5 h-1.5 rounded-full bg-emerald-500"></div>
                <span>已验证 {safeResult.validFiles}/{safeResult.totalFiles} 个文件</span>
              </div>
              {sortedIssues.some(i => i.severity === 'error') && (
                <div className="text-red-500 ml-1 font-medium text-sm">
                  需修正严重问题
                </div>
              )}
            </div>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={toggleExpanded} 
              className="text-gray-600 hover:text-gray-900 hover:bg-gray-100"
            >
              {isExpanded ? (
                <>
                  <ChevronUp className="mr-1 h-3.5 w-3.5" />
                  收起全部
                </>
              ) : (
                <>
                  <ChevronDown className="mr-1 h-3.5 w-3.5" />
                  展开全部
                </>
              )}
            </Button>
          </div>

          <ScrollArea className="max-h-[450px] pr-2">
            <Accordion
              type="multiple"
              value={expandedItems}
              onValueChange={setExpandedItems}
              className="w-full space-y-2"
            >
              {sortedIssues.map((issue, index) => (
                <AccordionItem key={index} value={`item-${index}`} className="border border-gray-100 rounded-lg overflow-hidden shadow-sm bg-white">
                  <AccordionTrigger className="hover:no-underline px-4 py-3 bg-white hover:bg-gray-50">
                    <div className="flex items-center gap-3 text-left w-full pr-4">
                      {renderSeverityIcon(issue.severity)}
                      <div className="flex-1 min-w-0">
                        <div className={`font-medium truncate ${
                        issue.severity === 'error' 
                          ? 'text-red-600' 
                          : issue.severity === 'warning'
                              ? 'text-amber-600'
                            : 'text-blue-600'
                      }`}>
                          {issue.fileName}
                        </div>
                        <div className="text-gray-500 text-sm truncate max-w-lg">
                          {issue.message}
                        </div>
                      </div>
                      {issue.fixed && (
                        <Badge variant="outline" className="ml-2 flex-shrink-0 bg-emerald-50 text-emerald-600 border-emerald-100 rounded-full whitespace-nowrap">
                          已修复
                        </Badge>
                      )}
                    </div>
                  </AccordionTrigger>
                  <AccordionContent className="bg-gray-50 px-6 pt-2 pb-4">
                    <div className="pl-7 pt-2">
                      <Alert className="border border-gray-200 bg-white shadow-sm rounded-lg">
                        <AlertTitle className="flex items-center gap-2 text-gray-800">
                          <Badge variant="outline" className="bg-white border-gray-200 text-gray-600 whitespace-nowrap">
                            {getIssueTypeName(issue.issueType)}
                          </Badge>
                          <span>智能建议</span>
                        </AlertTitle>
                        <AlertDescription className="mt-2 text-gray-600">
                          <div className="mb-3">
                            <p>{issue.suggestion}</p>
                            {issue.autoFixable && !issue.fixed && (
                              <p className="text-blue-600 text-sm mt-2">
                                您可以手动处理此问题，点击下方"手动修复"即可预览修改效果。
                              </p>
                            )}
                            {issue.issueType === 'quantity' && !issue.fixed && (
                              <p className="text-blue-600 text-sm mt-2">
                                请点击"上传文件"按钮，选择并上传符合要求的文件。
                              </p>
                            )}
                            {!issue.autoFixable && !issue.fixed && issue.issueType !== 'quantity' && (
                              <p className="text-amber-600 text-sm mt-2">
                                此问题需要您手动修改，按照上述建议操作即可解决问题。
                              </p>
                            )}
                          </div>
                          
                          <div className="flex justify-end mt-4">
                            {issue.autoFixable && !issue.fixed ? (
                              <Button 
                                variant="outline"
                                size="sm"
                                className="bg-white border-blue-200 text-blue-700 hover:text-blue-800 hover:bg-blue-50 shadow-sm whitespace-nowrap"
                                onClick={() => handleFixSingleIssue(issue)}
                              >
                                <FileText className="mr-1 h-3.5 w-3.5" />
                                手动修复
                              </Button>
                            ) : issue.issueType === 'quantity' && !issue.fixed ? (
                              <Button 
                                variant="outline"
                                size="sm"
                                className="bg-white border-blue-200 text-blue-700 hover:text-blue-800 hover:bg-blue-50 shadow-sm whitespace-nowrap"
                                onClick={() => handleFileUpload(issue.fileId, 'document')}
                              >
                                <Upload className="mr-1 h-3.5 w-3.5" />
                                上传文件
                              </Button>
                            ) : issue.fixed ? (
                              <Badge variant="outline" className="bg-emerald-50 text-emerald-600 border-emerald-100 rounded-full px-3 whitespace-nowrap">
                                问题已修复
                              </Badge>
                            ) : (
                              <Badge variant="outline" className="bg-gray-50 text-gray-600 border-gray-200 rounded-full px-3 whitespace-nowrap">
                                需手动修复
                              </Badge>
                            )}
                          </div>
                          
                          {/* 显示文件上传进度和状态 */}
                          {uploadingFiles.filter(f => f.issueId === issue.fileId).length > 0 && (
                            <div className="mt-4 space-y-3 border border-blue-100 bg-blue-50 p-3 rounded-md">
                              <h4 className="text-sm font-medium text-blue-700 flex items-center">
                                <Clock className="h-4 w-4 mr-1 animate-pulse" />
                                文件处理中
                              </h4>
                              
                              {uploadingFiles
                                .filter(f => f.issueId === issue.fileId)
                                .map((uploadFile, index) => (
                                  <div key={index} className="space-y-2">
                                    <div className="flex items-center justify-between">
                                      <span className="text-sm text-gray-600">{uploadFile.fileName}</span>
                                      <span className="text-xs font-medium">
                                        {uploadFile.status === 'uploading' ? `${uploadFile.progress}%` :
                                         uploadFile.status === 'processing' ? '处理中...' :
                                         uploadFile.status === 'complete' ? '完成' :
                                         '失败'}
                                      </span>
                                    </div>
                                    
                                    {uploadFile.status === 'uploading' && (
                                      <Progress value={uploadFile.progress} className="h-1" />
                                    )}
                                    
                                    {uploadFile.status === 'processing' && (
                                      <div className="flex items-center text-xs text-blue-600">
                                        <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                                        AI正在分析文件内容，请稍候...
                                      </div>
                                    )}
                                    
                                    {uploadFile.status === 'error' && (
                                      <div className="flex items-center text-xs text-red-600">
                                        <AlertCircle className="h-3 w-3 mr-1" />
                                        处理失败，请重试
                                      </div>
                                    )}
                                    
                                    {uploadFile.status === 'complete' && (
                                      <div className="flex items-center text-xs text-emerald-600">
                                        <CheckCircle2 className="h-3 w-3 mr-1" />
                                        文件已通过审查
                                      </div>
                                    )}
                                  </div>
                                ))}
                            </div>
                          )}
                        </AlertDescription>
                      </Alert>
                    </div>
                  </AccordionContent>
                </AccordionItem>
              ))}
            </Accordion>
          </ScrollArea>
        </div>

        <div className="flex justify-center py-4 border-t border-gray-100 mt-auto sticky bottom-0 bg-white rounded-b-lg">
          {fixableIssuesCount > 0 ? (
            <Button 
              onClick={handleAutoFixAll} 
              disabled={isFixing}
              className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-md px-6"
            >
              {isFixing ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  正在修复问题...
                </>
              ) : (
                <>
                  <WandSparkles className="mr-2 h-4 w-4" />
                  智能助手一键修复 
                </>
              )}
            </Button>
          ) : (
            <div className="flex items-center gap-2 text-sm text-gray-500">
              {fixError ? (
                <>
                  <span className="text-red-500">{fixError}</span>
                  <Button variant="outline" size="sm" onClick={handleAutoFixAll} className="ml-2 shadow-sm">
                    <RefreshCw className="h-3 w-3 mr-1" />
                    重试修复
                  </Button>
                </>
              ) : (
                <span>
                  {sortedIssues.some(i => i.fixed) ? "太好了！所有可自动修复的问题已处理完毕" : "请逐个解决以上问题，或联系管理员获取帮助"}
                </span>
              )}
            </div>
          )}
        </div>
      </div>
      
      {/* 差异对比视图对话框 */}
      <Dialog open={showDiffView} onOpenChange={setShowDiffView}>
        <DialogContent className="sm:max-w-[900px] p-0 border border-gray-100 rounded-xl shadow-md overflow-hidden">
          <div className="border-b border-gray-100 bg-gradient-to-r from-gray-50 to-white px-6 py-4">
            <h3 className="text-lg font-medium text-gray-800">文件修复预览</h3>
          </div>
          <div className="p-6">
            {selectedIssue && (
              <FileDiffView 
                issue={selectedIssue}
                file={files?.get(selectedIssue.fileId)?.[0]}
                onApplyFix={handleApplyFix}
                onCancel={() => setShowDiffView(false)}
              />
            )}
          </div>
        </DialogContent>
      </Dialog>
      
      {/* 批量修复确认对话框 */}
      <AlertDialog 
        open={showBatchFixAlert} 
        onOpenChange={(open) => {
          // 如果正在修复中，不允许关闭对话框
          if (isFixing && !open) return;
          
          // 如果是关闭对话框，确保重置修复状态
          if (!open) {
            setIsFixing(false);
            setProgressValue(0);
          }
          
          setShowBatchFixAlert(open);
        }}
      >
        <AlertDialogContent className="bg-white border border-gray-100 rounded-xl shadow-md p-0 overflow-hidden max-w-2xl">
          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-1">
            <AlertDialogHeader className="p-5 bg-white rounded-t-lg">
              <AlertDialogTitle className="text-xl font-medium text-gray-800 flex items-center">
                <WandSparkles className="mr-2 h-5 w-5 text-blue-600" />
                智能修复助手
              </AlertDialogTitle>
              <AlertDialogDescription className="text-gray-600 mt-3 space-y-3">
                {isFixing ? (
                  <div className="py-6 flex flex-col items-center justify-center">
                    <div className="relative w-16 h-16 mb-4">
                      <div className="absolute inset-0 rounded-full bg-blue-50 animate-ping opacity-30"></div>
                      <WandSparkles className="absolute inset-0 m-auto h-10 w-10 text-blue-600 animate-pulse" />
                    </div>
                    <p className="text-lg font-medium text-blue-700">正在进行智能修复...</p>
                    <p className="text-sm text-gray-500 mt-2">我们正在调整文件名称和格式，请稍候...</p>
                    <div className="w-full mt-6 px-8">
                      <Progress value={progressValue} className="h-2 bg-blue-100" />
                      <p className="text-xs text-gray-500 mt-2 text-center">
                        {progressValue < 100 
                          ? `预计剩余时间: ${Math.ceil((100 - progressValue) / 25)} 秒` 
                          : "处理完成，即将更新..."}
                      </p>
                    </div>
                  </div>
                ) : (
                  <>
                    <p>
                      您好！我们发现了 <span className="font-medium text-blue-600">{sortedIssues.length}</span> 个问题，
                      其中 <span className="font-medium text-blue-600">{fixableIssuesCount}</span> 个问题可以通过智能助手自动修复。
                    </p>
                    
                    <div className="bg-blue-50 p-3 rounded-md text-sm">
                      <p className="font-medium text-blue-700 mb-1">我们将为您自动修复：</p>
                      <ul className="list-disc pl-5 space-y-1 text-blue-700">
                        {sortedIssues.filter(i => i.autoFixable && !i.fixed).map((issue, index) => (
                          <li key={index}>
                            {issue.issueType === 'version' ? '文件版本号问题' : 
                             issue.issueType === 'naming' ? '文件命名规范问题' : 
                             issue.issueType === 'fileType' ? '文件格式问题' : 
                             '其他可修复问题'}
                             {issue.fileName && ` (${issue.fileName})`}
                          </li>
                        )).slice(0, 3)}
                        {sortedIssues.filter(i => i.autoFixable && !i.fixed).length > 3 && (
                          <li>等其他问题...</li>
                        )}
                      </ul>
                    </div>
                    
                    {sortedIssues.filter(i => !i.autoFixable && !i.fixed).length > 0 && (
                      <div className="bg-amber-50 p-3 rounded-md text-sm">
                        <p className="font-medium text-amber-700 mb-1">需要您手动处理：</p>
                        <ul className="list-disc pl-5 space-y-1 text-amber-700">
                          {sortedIssues.filter(i => !i.autoFixable && !i.fixed).map((issue, index) => (
                            <li key={index}>
                              {issue.issueType === 'quantity' ? '缺少必需文件' : '需手动修改问题'}
                              {issue.fileName && ` (${issue.fileName})`}
                            </li>
                          )).slice(0, 2)}
                          {sortedIssues.filter(i => !i.autoFixable && !i.fixed).length > 2 && (
                            <li>等其他问题...</li>
                          )}
                        </ul>
                      </div>
                    )}
                    
                    <p className="text-sm text-gray-500">
                      自动修复将调整文件名称和格式，让它们符合规范要求。修复后的文件将自动替换原文件，您可以在修复后查看并确认效果。
                    </p>
                  </>
                )}
              </AlertDialogDescription>
            </AlertDialogHeader>
          </div>
          <AlertDialogFooter className="flex justify-end gap-2 p-4 bg-gray-50 border-t border-gray-100">
            <AlertDialogCancel 
              className="border-gray-200 text-gray-600 hover:bg-gray-50 rounded-md"
              disabled={isFixing}
            >
              暂不修复
            </AlertDialogCancel>
            <AlertDialogAction 
              onClick={(e) => {
                // 阻止默认行为，防止对话框自动关闭
                e.preventDefault();
                // 先将状态设置为处理中，重置进度
                setIsFixing(true);
                setProgressValue(0);
                
                // 模拟进度条更新
                const progressInterval = setInterval(() => {
                  setProgressValue(prev => {
                    // 当进度达到95%时，等待实际处理完成
                    if (prev >= 95) {
                      clearInterval(progressInterval);
                      return prev;
                    }
                    // 进度增加速度随进度增加而减慢
                    const increment = 100 / (25 - Math.floor(prev / 20));
                    return Math.min(prev + increment, 95);
                  });
                }, 100);
                
                // 模拟处理延迟，然后再进行实际的批量修复操作
                setTimeout(() => {
                  // 执行实际的批量修复操作
                  confirmBatchFix();
                  
                  // 完成修复后，将进度设为100%
                  setProgressValue(100);
                  
                  // 短暂延迟后关闭对话框
                  setTimeout(() => {
                    clearInterval(progressInterval);
                    setShowBatchFixAlert(false);
                    // 重置进度
                    setProgressValue(0);
                  }, 1000);
                }, 2500); // 给用户足够的时间看到动画
              }}
              className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-sm rounded-md"
              disabled={isFixing}
            >
              {isFixing ? (
                <Loader2 className="mr-1.5 h-4 w-4 animate-spin" />
              ) : (
                <WandSparkles className="mr-1.5 h-4 w-4" />
              )}
              {isFixing ? "处理中..." : `立即修复 (${fixableIssuesCount})`}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* 隐藏的文件上传输入框 */}
      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        onChange={handleFileChange}
        accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png"
      />
    </>
  )
} 